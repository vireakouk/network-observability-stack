version: '3.9'

networks:
  mystack:

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
  postgres-data:

services:
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.36.0
    container_name: cadvisor
    ports:
      - 8080:8080
    networks:
      - mystack
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.30.1
    container_name: prometheus
    ports:
      - 9090:9090
    networks:
      - mystack
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:8.1.5
    container_name: grafana
    env_file:
      - './grafana/config.env'
    ports:
      - 3000:3000
    networks:
      - mystack
    volumes:
      - ./grafana:/etc/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/plugins:/etc/grafana/provisioning/plugins
      - grafana-data:/var/lib/grafana
    command:
      - '--config=/etc/grafana/grafana.ini'
    restart: unless-stopped
    depends_on:
      - prometheus
  
  alertmanager:
    image: prom/alertmanager:v0.23.0
    container_name: alertmanager
    ports:
      - 9093:9093
    networks:
      - mystack
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    restart: unless-stopped
    depends_on:
      - prometheus
  
  telegraf:
    image: telegraf:1.20.0
    container_name: telegraf
    ports:
      - 9001:9001
    networks:
      - mystack
    volumes:
      - ./telegraf:/etc/telegraf
    command:
      - '--config=/etc/telegraf/telegraf.conf'
    restart: unless-stopped
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:2.3.0
    container_name: loki
    ports: 
      - 3100:3100
    networks:
      - mystack
    volumes:
      - ./loki:/etc/loki
      - loki-data:/loki
    command:
      - '--config.file=/etc/loki/loki.yml'
    restart: unless-stopped
  
  promtail:
    image: grafana/promtail:2.3.0
    container_name: promtail
    networks:
      - mystack
    volumes:
      - /var/log:/var/log
      - ./promtail:/etc/promtail
    command:
      - '--config.file=/etc/promtail/promtail.yml'
    restart: unless-stopped
    
  # -------- #
  # nautobot #
  # -------- #
  nautobot:
    image: networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.3}-py${PYTHON_VER:-3.9}
    container_name: nautobot
    env_file:
      - './nautobot/local.env'
    ports:
      - 8443:8443
      - 8000:8080
    restart: unless-stopped

  nautobot-worker:
    image: networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.3}-py${PYTHON_VER:-3.9}
    container_name: nautobot-worker
    env_file:
      - './nautobot/local.env'
    entrypoint: 'nautobot-server rqworker'
    depends_on:
      - nautobot
    restart: unless-stopped
  # ----------------------------------
  # Celery worker must only be used in > 1.1.0 installs. If setting to a previous install, remove this worker
  # ----------------------------------
  celery_worker:
    image: networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.3}-py${PYTHON_VER:-3.9}
    container_name: celery_worker
    entrypoint: "sh -c 'nautobot-server celery worker -l $$NAUTOBOT_LOG_LEVEL'"
    healthcheck:
      interval: '5s'
      timeout: '5s'
      start_period: '5s'
      retries: 3
      test: ['CMD', 'nautobot-server', 'health_check']
    depends_on:
      - nautobot
      - redis
    env_file:
      - './nautobot/local.env'
    tty: true
  # ---------------------------------
  redis:
    image: 'redis:alpine'
    container_name: redis
    env_file:
      - './nautobot/local.env'
    command:
      - 'sh'
      - '-c'  # this is to evaluate the $REDIS_PASSWORD from the env
      - 'redis-server --appendonly yes --requirepass $$NAUTOBOT_REDIS_PASSWORD'  ## $$ because of docker-compose
    restart: unless-stopped

  postgres:
    image: 'postgres:10'
    container_name: postgres
    env_file:
      - './nautobot/local.env'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
  # --------------------------------- #